// https://www.khronos.org/opengl/wiki/OpenGL_Shading_Language
// https://registry.khronos.org/OpenGL-Refpages/gl4/index.php

#pragma language glsl3

extern int mode;
extern bool debugDraw;
extern int pattern[64];
extern vec4 white = vec4(176.0f / 255.0f, 174.0f / 255.0f, 167.0f / 255.0f, 1);
extern vec4 black = vec4( 49.0f / 255.0f,  47.0f / 255.0f,  40.0f / 255.0f, 1);

const vec4 TRANSPARENT =  vec4(0, 0, 0, 0);
const vec4 DEBUG =        vec4(1, 0, 0, 0.5); // used when rendering via playdate.debugDraw()

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec4 effect(vec4 color, Image tex, vec2 tex_coords, vec2 screen_coords)
{
  vec4 outputcolor = Texel(tex, tex_coords) * color;
  if (mode == 1)                          // ---------- "fillWhite"
  {
    if (outputcolor.a > 0) 
    {
      if (debugDraw)
      {
        return DEBUG;
      }
      else
      {
        return white;
      }
    }
    else
    {
      return TRANSPARENT;
    }
  }
  else if (mode == 2)                     // ---------- "fillBlack"
  {
    if (outputcolor.a > 0) 
    {
      if (debugDraw)
      {
        return DEBUG;
      }
      else
      {
        return black;
      }
    }
    else
    {
      return TRANSPARENT;
    }
  }
  // else if (mode == 2)                  // ---------- "XOR"
  // {
  //   // TODO: XOR drawmode
  // }
  // else if (mode == 3)                  // ---------- "NXOR"
  // {
  //   // TODO: NXOR drawmode
  // }
  else if (mode == 4)                  // ---------- "whiteTransparent"
  {
    if (outputcolor.a > 0)
    {
      if (debugDraw)
      {
        return DEBUG;
      }

      // choose white or black based on saturation
      float saturation = rgb2hsv(vec3(outputcolor)).z;
      // ideally this value is 0.5f (halfway) not sure why this doesn't work?
      if (saturation >= 0.45f)
      {
        return TRANSPARENT;
      }
      else
      {
        return black;
      }
    }
    else
    {
      // transparent pixel
      return TRANSPARENT;
    }
  }
  // else if (mode == 5)                  // ---------- "blackTransparent"
  // {
  //   // TODO: blackTransparent drawmode
  // }
  else if (mode == 6)                  // ---------- "inverted"
  {
    if (outputcolor.a > 0)
    {
      if (debugDraw)
      {
        return DEBUG;
      }

      // choose white or black based on saturation
      float saturation = rgb2hsv(vec3(outputcolor)).z;
      // ideally this value is 0.5f (halfway) not sure why this doesn't work?
      if (saturation >= 0.45f)
      {
        return black;
      }
      else
      {
        return white;
      }
    }
    else
    {
      // transparent pixel
      return TRANSPARENT;
    }
  }
  else if (mode == 7)                     // ---------- ???
  {
    // unused
  }
  else if (mode == 8)                     // ---------- "pattern"
  {
    // this mode does not exist on PD - this is to implement playdate.graphics.setPattern()

    // Use mod() to get the position of the current pixel within the 8x8 pattern
    int x = int(mod(screen_coords.x, 8.0));
    int y = int(mod(screen_coords.y, 8.0));

    // Use "x" and "y" multiplied by "w" to index into the pattern array
    if (pattern[x + y * 8] == 1) {
      if (debugDraw)
      {
        return DEBUG;
      }
      else
      {
        return white;
      }
    } else {
      return black;
    }
  }
  else                                    // ---------- "copy" (default)
  {
    if (outputcolor.a > 0)
    {
      if (debugDraw)
      {
        return DEBUG;
      }

      // choose white or black based on saturation
      float saturation = rgb2hsv(vec3(outputcolor)).z;
      // ideally this value is 0.5f (halfway) not sure why this doesn't work?
      if (saturation >= 0.45f)
      {
        return white;
      }
      else
      {
        return black;
      }
    }
    else
    {
      // transparent pixel
      return TRANSPARENT;
    }
  }
}